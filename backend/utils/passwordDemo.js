// =====================================================
// DEMOSTRACI칍N DEL PROCESO DE HASHEO DE CONTRASE칌AS
// =====================================================

const bcrypt = require('bcryptjs');

/**
 * PASO 1: Generar hash de una contrase침a
 */
async function demonstrateHashing() {
    const password = 'password123';
    
    console.log('游댏 DEMOSTRACI칍N DE HASHEO DE CONTRASE칌AS');
    console.log('=' * 50);
    
    // 1. Contrase침a original
    console.log('1. Contrase침a original:', password);
    
    // 2. Generar salt (sal aleatoria)
    const saltRounds = 10; // 2^10 = 1024 iteraciones
    const salt = await bcrypt.genSalt(saltRounds);
    console.log('2. Salt generada:', salt);
    
    // 3. Crear hash con salt
    const hash = await bcrypt.hash(password, salt);
    console.log('3. Hash final:', hash);
    
    // 4. Verificar contrase침a
    const isValid = await bcrypt.compare(password, hash);
    console.log('4. Verificaci칩n correcta:', isValid);
    
    const wrongPassword = 'wrongpassword';
    const isWrong = await bcrypt.compare(wrongPassword, hash);
    console.log('5. Verificaci칩n incorrecta:', isWrong);
    
    console.log('\n游눠 EXPLICACI칍N DEL HASH:');
    console.log('- Algoritmo: bcrypt');
    console.log('- Rounds: 10 (significa 2^10 = 1024 iteraciones)');
    console.log('- Salt: Previene ataques de rainbow table');
    console.log('- Irreversible: No se puede obtener la contrase침a original');
    
    return hash;
}

/**
 * PASO 2: Funci칩n para hashear contrase침as en la aplicaci칩n
 */
async function hashPassword(plainPassword) {
    try {
        const saltRounds = 10;
        const hash = await bcrypt.hash(plainPassword, saltRounds);
        return hash;
    } catch (error) {
        throw new Error('Error al hashear contrase침a');
    }
}

/**
 * PASO 3: Funci칩n para verificar contrase침as
 */
async function verifyPassword(plainPassword, hashedPassword) {
    try {
        const isMatch = await bcrypt.compare(plainPassword, hashedPassword);
        return isMatch;
    } catch (error) {
        throw new Error('Error al verificar contrase침a');
    }
}

/**
 * PASO 4: Generar m칰ltiples hashes de la misma contrase침a
 */
async function demonstrateUniqueness() {
    const password = 'password123';
    
    console.log('\n游댃 DEMOSTRACI칍N DE UNICIDAD:');
    console.log('Cada hash es 칰nico aunque la contrase침a sea igual:');
    
    for (let i = 1; i <= 3; i++) {
        const hash = await hashPassword(password);
        console.log(`Hash ${i}:`, hash);
    }
}

/**
 * EJECUTAR DEMOSTRACIONES
 */
if (require.main === module) {
    (async () => {
        await demonstrateHashing();
        await demonstrateUniqueness();
    })();
}

module.exports = {
    hashPassword,
    verifyPassword,
    demonstrateHashing
};
